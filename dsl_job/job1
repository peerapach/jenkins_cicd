job('job-1') {
    scm {
        git('git://github.com/peerapach/node-jx.git')
    }
    triggers {
        scm('H/15 * * * *')
    }
    steps {
        gradle 'test'
    }
}

pipelineJob('job_Pipeline_1') {

  def repo = 'https://github.com/peerapach/node-jx.git'

  triggers {
    scm('H/15 * * * *')
  }
  description("Pipeline for $repo")

  definition {
    cpsScm {
      scm {
        git {
          remote { url(repo) }
          branches('master', '**/feature*')
          scriptPath('misc/Jenkinsfile')
          extensions { }  // required as otherwise it may try to tag the repo, which you may not want
        }
      }
    }
  }
}

pipelineJob('job_Pipeline_2') {
  definition {
    cps {
      script('''
        pipeline {
            agent any
                stages {
                    stage('Stage 1') {
                        steps {
                            echo 'logic'
                        }
                    }
                    stage('Stage 2') {
                        steps {
                            echo 'logic'
                            echo 'add new step'
                        }
                    }
                }
            }
        }
      '''.stripIndent())
      sandbox()     
    }
  }
}

folder('/01-FRONTEND/PROD') {
    displayName('PROD')
    description('Folder for PROD')
}

pipelineJob('/01-FRONTEND/PROD/Pipeline_frontend_prod') {
  definition {
    cps {
      script(readFileFromWorkspace('pipelines/jenkinsfile1.groovy'))
      sandbox()     
    }
  }
}

pipelineJob('/01-FRONTEND/PROD/Pipeline_frontend_prod_2') {
  def repo = 'https://github.com/peerapach/node-jx.git'
  definition {
    cpsScm {
      scm {
        git {
          remote { url(repo) }
          branches('master', '**/feature*')
          scriptPath('misc/Jenkinsfile')
          extensions { }  // required as otherwise it may try to tag the repo, which you may not want
        }
      }
    }
  }
}

// need sectionedView plugin
sectionedView('project-summary') {
    filterBuildQueue()
    filterExecutors()
    sections {
        listView {
            name('Project A')
            jobs {
                regex(/project-A-.*/)
            }
            columns {
                status()
                weather()
                name()
                lastSuccess()
                lastFailure()
            }
        }
        listView {
            name('Project B')
            jobs {
                regex(/project-B-.*/)
            }
            jobFilters {
                regex {
                    matchValue(RegexMatchValue.DESCRIPTION)
                    regex(/.*-project-B-.*/)
                }
            }
            columns {
                status()
                weather()
                name()
                lastSuccess()
                lastFailure()
            }
        }
    }
}

//need nested plugin
nestedView('project-a') { 
    views {
        listView('overview') {
            jobs {
                regex(/project-A-.*/)
            }
            columns {
                status()
                weather()
                name()
                lastSuccess()
                lastFailure()
            }
        }
        buildPipelineView('pipeline') {
            selectedJob('project-a-compile')
        }
    }
}


listView('project-A') {
    description('All unstable jobs for project A')
    filterBuildQueue()
    filterExecutors()
    jobs {
        name('release-projectA')
        regex(/01-FRONTEND/PROD/Pipeline_frontend_.+/)
    }
    jobFilters {
        status {
            status(Status.UNSTABLE)
        }
    }
    columns {
        status()
        weather()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
}
